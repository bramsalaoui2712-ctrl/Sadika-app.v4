#!/usr/bin/env bash
# release.sh ‚Äî G√©n√©rique pour n‚Äôimporte quel projet Capacitor d√©j√† c√¢bl√© avec GitHub Actions
# Usage:
#   ./release.sh "mon-label-de-release"
# Comportement:
#   - npx cap copy/sync (pas de build local)
#   - commit + push sur la branche courante
#   - cr√©ation d‚Äôun tag vX.Y.Z auto-incr√©ment√© + push du tag
#   - d√©clenche ton workflow GitHub (release.yml)

set -euo pipefail

LABEL="${1:-release}"   # Sert √† d√©crire la release (message de commit & tag)
DATE_UTC="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

# --- garde-fous utiles ---
require() { command -v "$1" >/dev/null 2>&1 || { echo "‚ùå '$1' introuvable. Installe-le et r√©essaie."; exit 1; }; }
require git
require node
require npx

# V√©rif repo git
git rev-parse --is-inside-work-tree >/dev/null 2>&1 || { echo "‚ùå Pas dans un d√©p√¥t Git."; exit 1; }
BRANCH="$(git rev-parse --abbrev-ref HEAD || echo main)"
echo "üîß Branche courante: $BRANCH"

# V√©rif r√©pertoires utiles
[ -d "www" ] || { echo "‚ùå Dossier 'www' manquant (index.html, game.js, style.css...)."; exit 1; }

# --- Capacitor: copy & sync (l√©ger, pas de build local) ---
echo "‚öôÔ∏è  Capacitor copy & sync (pas de build local)..."
npx cap copy android
npx cap sync android
echo "‚úÖ Capacitor OK"

# --- Stage & commit s'il y a des changements ---
echo "üì¶ Pr√©paration du commit..."
git add -A

if ! git diff --cached --quiet; then
  git commit -m "release: ${LABEL} (${DATE_UTC})"
  echo "‚úÖ Commit cr√©√©."
else
  echo "‚ÑπÔ∏è  Aucun changement √† committer (on continue)."
fi

# --- Push branche ---
echo "üöÄ Push branche '$BRANCH' vers origin..."
git push -u origin "$BRANCH"
echo "‚úÖ Push OK."

# --- Calcul du prochain tag s√©mantique vX.Y.Z ---
next_patch() {
  local tag="$1"
  if [[ "$tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
    local major="${BASH_REMATCH[1]}"
    local minor="${BASH_REMATCH[2]}"
    local patch="${BASH_REMATCH[3]}"
    echo "v${major}.${minor}.$((patch+1))"
  else
    # Tag non s√©mantique ‚Üí on repart propre
    echo "v1.0.0"
  fi
}

# Dernier tag s√©mver vX.Y.Z (ou par d√©faut v1.0.0)
LAST_V_TAG="$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1 || true)"
if [[ -z "$LAST_V_TAG" ]]; then
  CANDIDATE="v1.0.0"
else
  CANDIDATE="$(next_patch "$LAST_V_TAG")"
fi

# Si le tag candidat existe d√©j√†, on incr√©mente jusqu‚Äô√† trouver un libre
while git rev-parse -q --verify "refs/tags/${CANDIDATE}" >/dev/null 2>&1; do
  CANDIDATE="$(next_patch "$CANDIDATE")"
done
NEW_TAG="$CANDIDATE"

# --- Cr√©ation + push du tag ---
echo "üè∑Ô∏è  Cr√©ation du tag ${NEW_TAG}..."
git tag -a "${NEW_TAG}" -m "release: ${LABEL} (${DATE_UTC})"
git push origin "${NEW_TAG}"
echo "‚úÖ Tag pouss√©: ${NEW_TAG}"

cat <<EOF

üéâ Fini.
- Branche       : ${BRANCH} (pouss√©e)
- Tag cr√©√©      : ${NEW_TAG} (pouss√©)
- Label release : ${LABEL}

üîî Ton workflow GitHub (release.yml) doit maintenant se d√©clencher automatiquement
   et produire l'APK sign√© dans la page de la Release / ou en Artifact.

Astuce:
- Pour relancer: ./release.sh "ton-label-suivant"
- Le script incr√©mente automatiquement la version s√©mantique (vX.Y.Z).
EOF
