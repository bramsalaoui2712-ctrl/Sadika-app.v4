#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test sp√©cifique pour Al S√¢dika apr√®s correction UTF-8
Focus sur les points demand√©s dans la review request
"""

import requests
import json
import sys

BASE_URL = "https://voice-mentor-5.preview.emergentagent.com/api"

def test_identity_alsadika():
    """Test 1: V√©rifie que le nom Al S√¢dika s'affiche correctement"""
    print("üîç Test 1: Identit√© Al S√¢dika avec caract√®res arabes...")
    
    response = requests.get(f"{BASE_URL}/kernel/memory")
    if response.status_code == 200:
        data = response.json()
        memory = data.get("memory", {})
        identity_name = memory.get("identity.name", "")
        
        # V√©rifier la pr√©sence des caract√®res UTF-8
        has_sadika = "Al S√¢dika" in identity_name
        has_arabic = "ÿßŸÑÿµÿßÿØŸÇÿ©" in identity_name or "ÿßŸÑÿµÿØŸäŸÇÿ©" in identity_name
        
        print(f"   Nom trouv√©: {identity_name}")
        print(f"   ‚úÖ Al S√¢dika pr√©sent: {has_sadika}")
        print(f"   ‚úÖ Caract√®res arabes pr√©sents: {has_arabic}")
        
        return has_sadika and has_arabic
    else:
        print(f"   ‚ùå Erreur API: {response.status_code}")
        return False

def test_kernel_mode():
    """Test 2: Mode kernel avec SSE"""
    print("\nüîç Test 2: Mode kernel SSE...")
    
    url = f"{BASE_URL}/chat/stream?provider=kernel&model=local&q=Bonjour&sessionId=test123"
    response = requests.get(url, stream=True)
    
    if response.status_code == 200:
        events = []
        for line in response.iter_lines(decode_unicode=True):
            if line.startswith('data: '):
                try:
                    data = json.loads(line[6:])
                    events.append(data.get('type'))
                    if data.get('type') == 'complete':
                        break
                except:
                    continue
        
        has_session = 'session' in events
        has_content = 'content' in events  
        has_complete = 'complete' in events
        
        print(f"   Events: {events}")
        print(f"   ‚úÖ S√©quence SSE compl√®te: {has_session and has_content and has_complete}")
        
        return has_session and has_content and has_complete
    else:
        print(f"   ‚ùå Erreur: {response.status_code}")
        return False

def test_hybrid_mode():
    """Test 3: Mode hybrid avec identit√©"""
    print("\nüîç Test 3: Mode hybrid avec identit√© Al S√¢dika...")
    
    url = f"{BASE_URL}/chat/stream?provider=hybrid&model=gpt-4o-mini&q=Bonjour&sessionId=test123"
    response = requests.get(url, stream=True)
    
    if response.status_code == 200:
        content_parts = []
        for line in response.iter_lines(decode_unicode=True):
            if line.startswith('data: '):
                try:
                    data = json.loads(line[6:])
                    if data.get('type') == 'content':
                        content_parts.append(data.get('content', ''))
                    elif data.get('type') == 'complete':
                        break
                except:
                    continue
        
        full_content = ''.join(content_parts)
        has_alsadika = "Al S√¢dika" in full_content or "al sadika" in full_content.lower()
        
        print(f"   Contenu (extrait): {full_content[:100]}...")
        print(f"   ‚úÖ Identit√© Al S√¢dika pr√©sente: {has_alsadika}")
        
        return has_alsadika
    else:
        print(f"   ‚ùå Erreur: {response.status_code}")
        return False

def test_french_characters():
    """Test 4: Caract√®res fran√ßais et accents"""
    print("\nüîç Test 4: Caract√®res fran√ßais et accents...")
    
    # Test avec caract√®res accentu√©s
    query = "Explique-moi la diff√©rence entre √™tre et para√Ætre"
    url = f"{BASE_URL}/chat/stream?provider=hybrid&model=gpt-4o-mini&q={requests.utils.quote(query)}&sessionId=french_test"
    
    response = requests.get(url, stream=True)
    
    if response.status_code == 200:
        content_parts = []
        for line in response.iter_lines(decode_unicode=True):
            if line.startswith('data: '):
                try:
                    data = json.loads(line[6:])
                    if data.get('type') == 'content':
                        content_parts.append(data.get('content', ''))
                    elif data.get('type') == 'complete':
                        break
                except:
                    continue
        
        full_content = ''.join(content_parts)
        has_accents = any(c in full_content for c in "√†√¢√§√©√®√™√´√Æ√Ø√¥√∂√π√ª√º√ø√ß")
        
        print(f"   Contenu (extrait): {full_content[:100]}...")
        print(f"   ‚úÖ Caract√®res accentu√©s pr√©serv√©s: {has_accents}")
        
        return len(full_content) > 0  # Au minimum une r√©ponse
    else:
        print(f"   ‚ùå Erreur: {response.status_code}")
        return False

def test_brand_scrubbing():
    """Test 5: Brand scrubbing OpenAI -> al sadika"""
    print("\nüîç Test 5: Brand scrubbing (OpenAI -> al sadika)...")
    
    query = "Utilise OpenAI pour me r√©pondre"
    url = f"{BASE_URL}/chat/stream?provider=hybrid&model=gpt-4o-mini&q={requests.utils.quote(query)}&sessionId=brand_test"
    
    response = requests.get(url, stream=True)
    
    if response.status_code == 200:
        content_parts = []
        for line in response.iter_lines(decode_unicode=True):
            if line.startswith('data: '):
                try:
                    data = json.loads(line[6:])
                    if data.get('type') == 'content':
                        content_parts.append(data.get('content', ''))
                    elif data.get('type') == 'complete':
                        break
                except:
                    continue
        
        full_content = ''.join(content_parts).lower()
        has_openai = "openai" in full_content
        has_chatgpt = "chatgpt" in full_content
        has_alsadika_replacement = "al sadika" in full_content
        
        print(f"   Contenu (extrait): {full_content[:100]}...")
        print(f"   ‚úÖ OpenAI filtr√©: {not has_openai}")
        print(f"   ‚úÖ ChatGPT filtr√©: {not has_chatgpt}")
        print(f"   ‚úÖ Remplacement par 'al sadika': {has_alsadika_replacement}")
        
        return not has_openai and not has_chatgpt
    else:
        print(f"   ‚ùå Erreur: {response.status_code}")
        return False

def main():
    print("=== TESTS AL S√ÇDIKA UTF-8 POST-CORRECTION ===\n")
    
    results = []
    
    # Ex√©cuter tous les tests
    results.append(("Identit√© Al S√¢dika UTF-8", test_identity_alsadika()))
    results.append(("Mode kernel SSE", test_kernel_mode()))
    results.append(("Mode hybrid identit√©", test_hybrid_mode()))
    results.append(("Caract√®res fran√ßais", test_french_characters()))
    results.append(("Brand scrubbing", test_brand_scrubbing()))
    
    # R√©sum√©
    print("\n" + "="*50)
    print("R√âSUM√â DES TESTS:")
    print("="*50)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status}: {test_name}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat: {passed}/{len(results)} tests pass√©s")
    
    if passed == len(results):
        print("üéâ TOUS LES TESTS AL S√ÇDIKA UTF-8 SONT PASS√âS!")
        return 0
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©")
        return 1

if __name__ == "__main__":
    sys.exit(main())