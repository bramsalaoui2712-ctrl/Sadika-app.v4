version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: alsadika-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${DB_NAME}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - ./volumes/mongodb:/data/db
      - ./init-scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - alsadika-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Al Sâdika Backend (FastAPI + Kernel)
  alsadika-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: alsadika-backend
    restart: unless-stopped
    environment:
      # Database
      MONGO_URL: mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${DB_NAME}?authSource=admin
      DB_NAME: ${DB_NAME}
      
      # CORS & Security
      CORS_ORIGINS: ${CORS_ORIGINS}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      
      # LLM Integration (Emergent Key)
      EMERGENT_LLM_KEY: ${EMERGENT_LLM_KEY}
      
      # Al Sâdika Kernel Config
      KERNEL_MODE: ${KERNEL_MODE:-production}
      KERNEL_LOG_LEVEL: ${KERNEL_LOG_LEVEL:-INFO}
      KERNEL_MEMORY_PATH: /app/data/kernel/approved_memory.json
      KERNEL_LOGS_PATH: /app/data/logs/kernel.log
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      API_KEY_HEADER: ${API_KEY_HEADER:-X-API-Key}
      
      # Performance
      WORKERS: ${WORKERS:-1}
      MAX_CONNECTIONS: ${MAX_CONNECTIONS:-100}
      
    ports:
      - "${BACKEND_PORT:-8001}:8001"
    volumes:
      - ./volumes/logs:/app/data/logs
      - ./volumes/uploads:/app/data/uploads
      - ./kernel_data:/app/data/kernel
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - alsadika-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reverse Proxy (Nginx) - Optionnel
  nginx:
    image: nginx:alpine
    container_name: alsadika-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./volumes/logs/nginx:/var/log/nginx
    depends_on:
      - alsadika-backend
    networks:
      - alsadika-network
    profiles:
      - proxy

  # Redis Cache (Optionnel pour mise en cache)
  redis:
    image: redis:7-alpine
    container_name: alsadika-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - ./volumes/redis:/data
    networks:
      - alsadika-network
    profiles:
      - cache

networks:
  alsadika-network:
    driver: bridge
    name: alsadika-network

volumes:
  mongodb_data:
    driver: local
  kernel_data:
    driver: local